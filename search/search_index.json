{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-the-unoffical-mcpreborn-wiki","title":"Welcome to the (Unoffical) MCPReborn wiki!","text":"<p>Here you can find guides and resources to help you get started with Minecraft Coder Pack Reborn!</p> <p>This is my (@kagaries) first wiki ever, so it's probably very lack luster and clunky.</p> <ul> <li> <p>Guides</p> <p>Get started with MCPReborn, and learn all about how it works!(1)</p> <ol> <li>This part of the wiki is in heavy development, and lacks many things currently.</li> </ol> <p>Getting started | Basic Knowledge</p> </li> <li> <p>Discord</p> <p>Check out the discord to suggest stuff or talk with others about MCPReborn Wiki!</p> <p>YOU MUST BE 13+ YEARS OLD</p> <p>Server Invite</p> </li> <li> <p>Reference</p> <p>Find every function of every class at a glance!(1)</p> <ol> <li>This part of the wiki is in currently under very heavy development.</li> </ol> <p>Reference</p> </li> </ul> <ul> <li> <p>Magia Edition</p> <p>This is more of a personal project, but showcases some of what you could do with MCPReborn.</p> <p>Github | Latest Release</p> </li> </ul>"},{"location":"contact/","title":"Contact","text":""},{"location":"contact/#kagaries","title":"Kagaries","text":"<p>Discord: @kagaries</p> <p>E-Mail: kagarieswinnfield@gmail.com</p>"},{"location":"guides/guideHome/","title":"Home","text":""},{"location":"guides/guideHome/#welcome-to-the-guides","title":"Welcome to the Guides!","text":"<p>This will teach you how to do a variaty of things from simple MobEffects, to creating new mobs and more.</p> <p>THIS WILL NOT TEACH YOU HOW TO MAKE A CLIENT FOR HACKING. IF YOU WANT THAT, YOU'RE ON YOUR OWN.</p> <p>It's recommended that you start at Getting Started if you don't know how to get started yet.</p>"},{"location":"guides/Basics/FirstModification/","title":"Getting Started","text":""},{"location":"guides/Basics/FirstModification/#your-first-modification","title":"Your First Modification","text":"<p>Before starting it's recommended that you have a basic knowledge of Java (classes, variables, importing, etc).</p>"},{"location":"guides/Basics/FirstModification/#setup","title":"Setup","text":"<p>To get started go to the MCPReborn Github Page and download the latest version (1.20.2 at the time of writing), and follow the instructions on the repo and come back here when you're done. You can also use this video to help get started as well.</p> <p>All done? Good! Now we can start look through Minecraft's source code! To start, search for the MobEffects class (Double-Shift on Intellij), this class contains all the status effects present within the game.</p>"},{"location":"guides/Basics/FirstModification/#mob-effect-creation","title":"Mob Effect Creation","text":"<p>In the MobEffects class, you should see something like: <pre><code>public static final MobEffect MOVEMENT_SPEED = register(\"speed\", (new MobEffect(MobEffectCategory.BENEFICIAL, 3402751)).addAttributeModifier(Attributes.MOVEMENT_SPEED, \"91AEAA56-376B-4498-935B-2F7F68070635\", (double)0.2F, AttributeModifier.Operation.MULTIPLY_TOTAL));\n</code></pre> This is what effects being registered looks like. It contains the id, MobEffect instance, and an attribute modifier.</p>"},{"location":"guides/Basics/FirstModification/#basic-effect","title":"Basic Effect","text":"<p>We can now starting adding a new effect! To get started add:</p> <pre><code>public static final MobEffect NAME = register(\"name\", (new MobEffect(MobEffectCategory.BENEFICIAL, 3402751)));\n</code></pre> <p>This creates and registers the new effect for us to use! The <code>\"name\"</code> is the name id of the effect, MAKE SURE IT IS NOT SOMETHING THAT ALREADY EXISTS, It WILL error if you do. Also make sure there are no special characters (', !, ., etc.), or uppercase keys.</p> <p>The <code>new MobEffect()</code> part creates the effect itself, the <code>MobEffectCategory</code> within the <code>new MobEffect()</code> determines if its on the top row (BENEFICIAL) or bottom row (NEUTRAL/HARMFUL), the <code>3402751</code> is just the color in decimal.</p> <p>From there you can start the game, and give yourself the effect! One thing you will notice is the <code>effect.minecraft.name</code> rather then <code>name</code> for the effect display name. You can learn how to set up resources here.</p>"},{"location":"guides/Basics/FirstModification/#attributes","title":"Attributes","text":"<p>Now to add attribute modifiers! </p> <p>Adding attributes is fairly simple, but will require a UUID Generator for saving to work.</p> <p>To start adding the attribute you want it to change add:</p> <pre><code>.addAttributeModifier(Attributes.MOVEMENT_SPEED)\n</code></pre> <p>to the end of <code>(new MobEffect(MobEffectCategory.BENEFICIAL, 3402751))</code>.</p> <p>Next you'll need to generate a new UUID (link to one above), and insert it right after the chosen attribute like so:</p> <pre><code>.addAttributeModifier(Attributes.MOVEMENT_SPEED, \"RANDOM UUID\")\n</code></pre> <p>Now to set the modifier, simply add a double for the modifier:</p> <pre><code>.addAttributeModifier(Attributes.MOVEMENT_SPEED, \"RANDOM UUID\", 1D)\n</code></pre> <p>Finally, select the <code>AttributeModifier.Operation</code> you want to use. <code>ADDITION</code> adds the value to the attribute, <code>MULTIPLY_TOTAL</code> multiplies the attribute including other modifers, and <code>MULTIPLY_BASE</code> multiplies the attribute, ignoring the other modifiers.</p> <p>After all that you should have something that looks like:</p> <pre><code>public static final MobEffect NAME = register(\"name\", (new MobEffect(MobEffectCategory.BENEFICIAL, 3402751)).addAttributeModifier(Attributes.MOVEMENT_SPEED, \"RANDOM UUID\", 1D, AttributeModifier.Operation.ADDITION));\n</code></pre> <p>Now start the game and give it a test run!</p>"},{"location":"guides/Beginner/BasicKnowledge/","title":"Basic Knowledge","text":""},{"location":"guides/Beginner/BasicKnowledge/#basic-knowledge","title":"Basic Knowledge","text":"<p>Minecraft: Java Edition is built on Java, crazy I know, but has many systems that you should be aware of before going further.</p>"},{"location":"guides/Beginner/BasicKnowledge/#registries","title":"Registries","text":"<p>Minecraft uses a Registry System for things like mobs, blocks, items, mob effects, etc.</p> <p>When you register something, it usually has an ID at the start, these IDs cannot be the same name as another in the same registry, cannot include special characters (besides _), and cannot include uppercase keys.</p> <p>The extra info in the Registry is determined by the type of Registry it is (i.e. MobEffects have uuids and a new mob effect, mobs have a entity type builder, etc).</p>"},{"location":"guides/Beginner/BasicKnowledge/#organization","title":"Organization","text":"<p>Minecraft is organized fairly well all things considered.</p> <p>If you want to find things that typically spawn or interact with the world, you can find it in the World folder.</p> <p>It's recommended you keep things organized the way they are, it works, and trying to change it will cause more pain then needed.</p>"},{"location":"guides/Beginner/BasicKnowledge/#nbt","title":"NBT","text":"<p>NBT (or what's usually CompoundTag) is how the game stores data for items, mobs, and most things that needs data saved.</p>"},{"location":"guides/Beginner/Resources/","title":"Resources","text":""},{"location":"guides/Beginner/Resources/#resources","title":"Resources","text":"<p>Minecraft uses a \"resources\" folder for stuff like data and assets.</p> <p>If you remember from Getting Started where the MobEffect you created didn't have a tranlatable (a string that determines what text says), or an icon, this is why.</p>"},{"location":"guides/Beginner/Resources/#adding-resources","title":"Adding Resources","text":"<p>Adding resources is a fairly easy task. First, create a resources folder within the main folder. This is where the resources will be indexed and used from, as well as compile with.</p> <p>You'll need ALL of the base Minecraft assets within the folder as well, which you can get from here.</p> <p>From here you can start adding everything you need!</p>"},{"location":"guides/Beginner/Resources/#adding-a-translatable","title":"Adding a Translatable","text":"<p>When you see something like <code>effect.minecraft.name</code>, it means that string doesn't have a translatable within it's lang file.</p> <p>Lang files are files when have translations for any kind of text specified to have one.</p> <p>To add something to one, go to <code>resources/assets/minecraft/lang</code> Here you will find every lang file within minecraft. Now find the lang file that corresponds with your selected language (i.e. US is en_us.json).</p> <p>Here we can start adding translations.</p> <p>For example, you can add:</p> <pre><code>\"effect.minecraft.name\": \"name\",\n</code></pre> <p>to give your effect a name!</p>"},{"location":"guides/Beginner/Resources/#adding-an-icon","title":"Adding an Icon","text":"<p>For adding an icon, you will need an image to use for said icon. It MUST be a .png, or Minecraft will not recongize the file.</p> <p>To get to the MobEffect icons, go to <code>resources/assets/minecraft/textures/mob_effect</code> This is where you will add the icon to.</p> <p>Now drag you icon (or copy it) into the folder and name it the same as the ID you chose for the effect. If all goes well the effect should now have an icon rather then the placeholder black and purple square.</p>"},{"location":"guides/Beginner/items/Foods/","title":"Food Items","text":"<p>You've made some basic items now (or hopefully have), now we'll learn about how to create food items.</p>"},{"location":"guides/Beginner/items/Foods/#creating-basic-food","title":"Creating Basic Food","text":"<p>Creating food is very simple, to start go to the Foods class. Here we will define the properties of our food item.</p> <p>To start off, add something like:</p> <pre><code>public static final FoodProperties FLINT\n</code></pre> <p>This is where we will create the properites for the food itself.</p> <p>Now for the builder, we'll add <code>(new FoodProperties.Builder()).build()</code> like this:</p> <pre><code>public static final FoodProperties FLINT = (new FoodProperties.Builder()).build();\n</code></pre> <p>The properites now exist! But they don't really do anything yet, so lets add some values:</p> <pre><code>public static final FoodProperties FLINT = (new FoodProperties.Builder()).nutrition(1).saturationMod(0.1f).build();\n</code></pre> <p><code>.nutrition()</code> is the amount of hunger bars gain (i.e. 1 is half, 2 is a full one), <code>.saturationMod()</code> adds to your saturation, this is the bigger one which allows for extremely quick healing, and lasts much longer then normal hunger.</p> <p>Now we'll need to add this FoodProerties to the item, so navigate to the Items class, and we'll add it there.</p> <p>Once there, find the item you want to add the food properites to, for example:</p> <pre><code>public static final Item FLINT = registerItem(\"flint\", new Item(new Item.Properties()));\n</code></pre> <p>Now on the end of the Item.Properites we'll add <code>.food(Foods.FLINT)</code>:</p> <pre><code>public static final Item FLINT = registerItem(\"flint\", new Item(new Item.Properties().food(Foods.FLINT)));\n</code></pre> <p>You can now go in-game and eat Flint!</p>"},{"location":"guides/Beginner/items/Foods/#effects","title":"Effects","text":"<p>Foods also support effect giving like the Golden Apple or Rotten Flesh.</p> <p>Let's head back over to the Foods class, there we'll add an effect to the Flint FoodProperties we just created.</p> <p>To add the effect, insert <code>.effect()</code> after the <code>.saturationMod()</code>, then we'll need to add <code>new MobEffectInstance()</code> within the <code>.effect()</code>:</p> <pre><code>public static final FoodProperties FLINT = (new FoodProperties.Builder()).nutrition(1).saturationMod(0.1f).effect(new MobEffectInstance()).build();\n</code></pre> <p>Now in the MobEffectInstance, we'll need to add what effect it will give, the time and amplifer, and if it will be visible or not:</p> <pre><code>.effect(new MobEffectInstance(MobEffects.POISON, 100, 0))\n</code></pre> <p>The first value <code>MobEffects.POISON</code> is the effect it will give on use, the <code>100</code> is the time it will last for in ticks, and the <code>0</code> is the amplifier (0 = Base Poison, 1 = Poison 2, etc.). Another thing in a MobEffectInstance is how visible the effect is, for example you can hide both the bubble effects, turn off ambient, and hide the icon by doing:</p> <pre><code>.effect(new MobEffectInstance(MobEffects.POISON, 100, 0, false, false, false))\n</code></pre> <p>Now you'll see the <code>.effect()</code> is still getting mad, this is because you need to add the change for the effect to be applied as well:</p> <pre><code>.effect(new MobEffectInstance(MobEffects.POISON, 100, 0), 1.0f)\n</code></pre> <p>The 1.0f is 100% chance, 0.5f would be a 50% chance.</p> <p>All of it together it should be:</p> <pre><code>public static final FoodProperties FLINT = (new FoodProperties.Builder()).nutrition(1).saturationMod(0.1f).effect(new MobEffectInstance(MobEffects.POISON, 100, 0), 1.0f).build();\n</code></pre>"},{"location":"guides/Beginner/items/Foods/#closing","title":"Closing","text":"<p>You now know how to make foods in Minecraft! You can add more then one effect for a food at a time as well, and change the properties of other foods if you want to!</p>"},{"location":"guides/Beginner/items/Items/","title":"Basics","text":""},{"location":"guides/Beginner/items/Items/#basic-items","title":"Basic Items","text":"<p>This guide will teach you (almost) all about how basic items work, function, and how to make your own!</p>"},{"location":"guides/Beginner/items/Items/#how-do-items-work","title":"How do Items Work?","text":"<p>Items in Minecraft: Java Edition are registered in the Items class, and can be different based on the item type you are going for.</p> <p>They can be split into different catagories:</p> <p>Normal Items, Blocks, Tools (Sword, Pickaxes, etc.), and Special Items</p>"},{"location":"guides/Beginner/items/Items/#normal-items","title":"Normal Items","text":"<p>These are just generic items created with the Item class, mostly crafting items with no other purpose.</p>"},{"location":"guides/Beginner/items/Items/#blocks","title":"Blocks","text":"<p>The physical items for the blocks, registered differently from other items using registerBlock, rather then registerItem.</p>"},{"location":"guides/Beginner/items/Items/#tools","title":"Tools","text":"<p>Tools have a seperate class for each tool type, but are registered like normal items</p>"},{"location":"guides/Beginner/items/Items/#special-items","title":"Special Items","text":"<p>These items are created with a unqine class rather then a tool or the Item class, they usually have special functionality compared to normal items.</p>"},{"location":"guides/Beginner/items/Items/#_1","title":"Basics","text":"<p>So what can you do with all this? You can create your own item of course, but before that, let's look at how some items function.</p>"},{"location":"guides/Beginner/items/Items/#items-and-how-they-function","title":"Items and How They Function","text":"<p>The Item class comes with many functions for when you want an item to do something.</p> <p>For example, the PotionItem class uses the use, useOn, and finishUsingItem functions for its functionality as a potion:</p> <p>This is used when an item is finished being used when holding down the RMB for the use duration. <pre><code>public ItemStack finishUsingItem(ItemStack p_42984_, Level p_42985_, LivingEntity p_42986_)\n</code></pre> This is used when using it on a block, entity, or other object in the world. <pre><code>public InteractionResult useOn(UseOnContext p_220235_)\n</code></pre> This is used when clicking RMB. <pre><code>public InteractionResultHolder&lt;ItemStack&gt; use(Level p_42993_, Player p_42994_, InteractionHand p_42995_)\n</code></pre></p> <p>Every item from Ink Sacs to End Crystals all use these functions based on what thier needed for.</p> <p>Items also use Implements for even more functionality, like armor with the Equipable interface:</p> <pre><code>public class ArmorItem extends Item implements Equipable\n</code></pre>"},{"location":"guides/Beginner/items/Items/#_2","title":"Basics","text":"<p>Now that you have a general idea on how items function, we can now look at creating some!</p>"},{"location":"guides/Beginner/items/Items/#creating-an-item","title":"Creating An Item","text":"<p>To start, go to the Items class, this is where we'll add the item.</p> <p>The first step to creating the item is creating the variable it will be registered from, which can be done like:</p> <pre><code>public static final Item TEST = registerItem();\n</code></pre> <p>You will notice that the registerItem has an error, you'll need to add both the id of the item, and the item class itself, adding those should make this look like:</p> <pre><code>public static final Item TEST = registerItem(\"test\", new Item());\n</code></pre> <p>Getting closer, but the <code>new Item</code> is now erroring, this is because it needs a <code>new Item.Properties()</code> inside of it. Adding that, it should end up like:</p> <pre><code>public static final Item TEST = registerItem(\"test\", new Item(new Item.Properties()));\n</code></pre> <p>Great! Now we need to set up the items model data, you'll need to have followed the Resources or have a resources folder already set up for this.</p> <p>To get to where we need to add the model def, it should be at <code>resources/assets/minecraft/models/item</code>, this is where we will create the json.</p> <p>When creating the json file, make sure the name of it is the exact same as the item id, Minecraft will ignore the json file if its not exact. For our test item, we'll use the <code>acacia_boat.json</code> as a template for use with our item. Inside the file it should look something close to:</p> <pre><code>{\n  \"parent\": \"minecraft:item/generated\",\n  \"textures\": {\n    \"layer0\": \"minecraft:item/acacia_boat\"\n  }\n}\n</code></pre> <p>the \"parent\" determines the way the item is displayed in the players hand, and the \"textures\" is where the the textures are defined. For now just keep the texture \"layer0\" the same, and change the file name to the id of your item. If all goes well, the item should now correctly work!</p> <p>To test it, go ingame and use <code>/give @s minecraft:ITEM_ID</code></p>"},{"location":"guides/Beginner/items/Items/#tools_1","title":"Tools","text":"<p>Tools start off almost the same as a normal item:</p> <pre><code>public static final Item TEST = registerItem(\"test\", new Item());\n</code></pre> <p>But with a twist. The <code>new Item()</code> is going to be replaced by one of the tool classes.</p> <p>For this example, we'll use the SwordItem class.</p> <p>When replacing the <code>new Item()</code> with <code>new SwordItem()</code>, you'll notice there are now 4 params rather then 1. The first 3 determine what the tier of ore it is, the base damage, and the attack speed, the 4th one is just <code>new Item.Properties()</code> again.</p> <p>First on what we need to add is the tier of item, this determines added damage, durability, mining speed, and most of the other stuff about the stats about an item. For our item, I'll use <code>Tiers.GOLD</code>, which should be:</p> <pre><code>public static final Item TEST = registerItem(\"test\", new SwordItem(Tiers.GOLD))\n</code></pre> <p>Next is the added damage, this is just an interger which gets added to the damage of the chosen item tier, adding it should look like:</p> <pre><code>public static final Item TEST = registerItem(\"test\", new SwordItem(Tiers.GOLD, 2))\n</code></pre> <p>Good! Now for the attack speed. This determines how fast the item charges, the lower the value, the slower the charge. For this it should just be:</p> <pre><code>public static final Item TEST = registerItem(\"test\", new SwordItem(Tiers.GOLD, 2, -1.5f))\n</code></pre> <p>The item will now attack 1.5 slower then fists.</p> <p>Now just add <code>new Item.Properties()</code> and the item will be finished:</p> <pre><code>public static final Item TEST = registerItem(\"test\", new SwordItem(Tiers.GOLD, 2, -1.5f, new Item.Properties()))\n</code></pre> <p>Just follow how to create the item model above (with tools its recommended to use <code>\"minecraft:item/handheld\"</code> rather then generated) and now it should work!</p>"},{"location":"guides/Beginner/items/Items/#tiers","title":"Tiers","text":"<p>As said above, tiers are a enumeration that determine the stats of an item. Now you get to learn how to create your own!</p>"},{"location":"guides/Beginner/items/Items/#creating-a-tier","title":"Creating a Tier","text":"<p>Starting off, head to the Tiers class and there you'll see some tiers already defined. A tier is made up of mining level, durability, mining speed, damage, enchantment value, and repair ingredient.</p> <p>Let's start off but defining the name of the tier we want:</p> <pre><code>NETHERITE(4, 2031, 9.0F, 4.0F, 15, () -&gt; {\n  return Ingredient.of(Items.NETHERITE_INGOT);\n}),\nEMERALD();\n</code></pre> <p>Now with that we can start defining the values the items given the tier will use, first we start off with the mining level:</p> <pre><code>EMERALD(3);\n</code></pre> <p>Next is the durability, we can just set it to 1024:</p> <pre><code>EMERALD(3, 1024);\n</code></pre> <p>Now for the mining speed:</p> <pre><code>EMERALD(3, 1024, 8.0F);\n</code></pre> <p>The mining speed is a float, make sure you don't forget that.</p> <p>For the attack damage, we can just have 10.0F:</p> <p><pre><code>EMERALD(3, 1024, 8.0F, 10.0F);\n</code></pre> Now for the final 2 things, the second to last is the enchantmentValue:</p> <pre><code>EMERALD(3, 1024, 8.0F, 10.0F, 23);\n</code></pre> <p>This just determines the chance for better enchants, and the cost of them.</p> <p>Finally, we set the repair material, this is just the material that is used when wanting to repair it in an anvil.</p> <pre><code>EMERALD(3, 1024, 8.0F, 10.0F, 23, () -&gt; {\n  return Ingredient.of(Items.EMERALD);\n});\n</code></pre> <p>To use it, just replace <code>Tiers.GOLD</code> with <code>Tiers.EMERALD</code>.</p>"},{"location":"guides/Beginner/items/Items/#custom-textures","title":"Custom Textures","text":"<p>If you followed the Resources guide from before, all you'll need to do to add a texture is go to <code>assets/minecraft/textures/items</code> and add the texture there, after that, just replace <code>\"layer0\": \"minecraft:item/acacia_boat\"</code> with <code>\"layer0\": \"minecraft:item/TEXTURE_NAME\"</code> and it should work.</p>"},{"location":"guides/Beginner/items/Items/#closing","title":"Closing","text":"<p>Good job! You now know how to add fairly simple items to Minecraft.</p>"},{"location":"guides/Beginner/mobeffects/EffectClasses/","title":"Effect Classes","text":"<p>In this guide, you'll learn to make make custom class effect like <code>RegenerationMobEffect</code>.</p>"},{"location":"guides/Beginner/mobeffects/EffectClasses/#creating-the-class","title":"Creating the Class","text":"<p>To start go to the effect folder in world, and create a class named <code>TestMobEffect</code>. First we need to have the class extend MobEffect:</p> <pre><code>public class TestMobEffect extends MobEffect\n</code></pre> <p>Now it'll start erroring, we'll need to have a constructor for it to stop being mad, if you're using IntelliJ you can hover over it and it'll do it for you, but you can manually add it:</p> <pre><code>protected TestMobEffect(MobEffectCategory p_19451_, int p_19452_) {\n    super(p_19451_, p_19452_);\n}\n</code></pre> <p>Nice! Now we can start adding the methods used for healing the player. First add:</p> <pre><code>public void applyEffectTick(LivingEntity p_301282_, int p_300945_) {\n    super.applyEffectTick(p_301282_, p_300945_);\n}\n</code></pre> <p>This is where the effect will tick its healing, to get started adding that start with:</p> <pre><code>public void applyEffectTick(LivingEntity p_301282_, int p_300945_) {\n    super.applyEffectTick(p_301282_, p_300945_);\n    if (p_301282_.getHealth() &lt; p_301282_.getMaxHealth()) {\n\n    }\n}\n</code></pre> <p>This will prevent us from trying to heal at or above the entity's max health. Next we'll just need to add:</p> <pre><code>public void applyEffectTick(LivingEntity entity, int p_300945_) {\n    super.applyEffectTick(p_301282_, p_300945_);\n    if (p_301282_.getHealth() &lt; p_301282_.getMaxHealth()) {\n        p_301282_.heal(2.0F);\n    }\n}\n</code></pre> <p>And any entity with this effect will now health a full heart of health! But how fast will it do that? It'll do that every tick since we haven't add one thing yet, let's add that now:</p> <pre><code>public boolean shouldApplyEffectTickThisTick(int tickCount, int amplifier) {\n\n}\n</code></pre> <p>This is what will determine if it should heal this tick or not. We can start by adding:</p> <pre><code>public boolean shouldApplyEffectTickThisTick(int tickCount, int amplifier) {\n    int i = 35 &gt;&gt; amplifier;\n}\n</code></pre> <p>This will determine the ticks inbetween the effect being applied. Now we add the conditional:</p> <pre><code>public boolean shouldApplyEffectTickThisTick(int tickCount, int amplifier) {\n    int i = 35 &gt;&gt; amplifier;\n    if (i &gt; 0) {\n        return tickCount % i == 0;\n    } else {\n        return true;\n    }\n}\n</code></pre> <p>Now that we have the effect class created, we can create an effect with it!</p>"},{"location":"guides/Beginner/mobeffects/EffectClasses/#creating-the-effect","title":"Creating the Effect","text":"<p>If you followed the Getting Started guide, you'll know how you created an effect in there, we'll just create a basic effect like:</p> <pre><code>public static final MobEffect NAME = register(\"name\", (new MobEffect(MobEffectCategory.BENEFICIAL, 3402751)));\n</code></pre> <p>Now that we have this we'll want to change the <code>(new MobEffect())</code> to <code>(new TestMobEffect())</code> keeping all the values inside the same, so it should look like:</p> <pre><code>public static final MobEffect NAME = register(\"name\", (new TestMobEffect(MobEffectCategory.BENEFICIAL, 3402751)));\n</code></pre> <p>You can now give yourself the effect and start healing!</p>"},{"location":"guides/Beginner/mobeffects/EffectClasses/#closing","title":"Closing","text":"<p>Creating effect classes is very simple, later we'll take about how effects can mess with your vision and that kind of stuff.</p>"},{"location":"guides/Intermediate/YouandData/","title":"Data and You","text":""},{"location":"guides/Intermediate/YouandData/#data-and-you","title":"Data and You","text":"<p>Welcome to the first Intermediate tutorial, before we start, make sure you have your resources folder set up, if you do not you can go here for more info.</p>"},{"location":"guides/Intermediate/YouandData/#what-data","title":"What Data?","text":"<p>Minecraft uses JSON for a lot of things. Advancements, recipes, and world generation are just a few. Minecraft also has a main data folder, this is where the things mentioned before live at. You can find this folder at <code>resources/data/minecraft/</code>.</p>"},{"location":"guides/Intermediate/YouandData/#soooo-what-can-i-do-with-this","title":"Soooo, What can I do with this?","text":"<p>From here you can add custom recipes, structures, trims, dimensions, advancements and more all from this simple little folder. This is really important for modders who want to add even more to their version.</p>"},{"location":"guides/Intermediate/YouandData/#data-generation","title":"Data Generation","text":"<p>To make your and their (Mojang's) life 10x easier, they have data generators to be used, these can be found within <code>minecraft/data</code>.</p>"},{"location":"guides/Intermediate/YouandData/#using-data-generation","title":"Using Data Generation","text":"<p>Within the data folder, you'll find a Main class, this is where you start the data generation. If you were to run it with the \"all\" param, you'll see a new folder be created called 'generated'. Now you might be thinking why we didn't do this in the Resources tutorial, that's because if you look in the assets folder you'll notice something. There are files missing, this is why we download them all first (also because it was a beginner tutorial).</p> <p>What's the point then? It doesn't generate everything we need right? Well, not in terms of the assets, but we get everything for the data part. This is where we learn how to use the Providers.</p>"},{"location":"guides/Intermediate/YouandData/#providers","title":"Providers","text":"<p>If you'll notice, there are a couple of folders within the data folder, pretty much all include providers and generators. If we give the advancements folder a look, you'll see the AdvancementProvider, this is what generates the data, but you'll notice another folder named packs, this is the folder where the advancements are defined, there is also the VanillaAdvancementProvider. Let's open up the VanillaStoryAdvancements class to get an idea on how to use these.</p>"},{"location":"guides/Intermediate/YouandData/#creating-your-own-data","title":"Creating Your Own Data","text":"<p>Within the VanillaStoryAdvancements class, you'll notice a method named \"generate\", this is where the advancements are defined. An advancement usually looks like:</p> <p><pre><code>AdvancementHolder advancementholder = Advancement.Builder.advancement().display(Blocks.GRASS_BLOCK, Component.translatable(\"advancements.story.root.title\"), Component.translatable(\"advancements.story.root.description\"), new ResourceLocation(\"textures/gui/advancements/backgrounds/stone.png\"), FrameType.TASK, false, false, false).addCriterion(\"crafting_table\", InventoryChangeTrigger.TriggerInstance.hasItems(Blocks.CRAFTING_TABLE)).save(p_248554_, \"story/root\");\n</code></pre> When adding your own, you can use the other data around it if you don't know how to add data to that generator yet.</p>"},{"location":"guides/Intermediate/YouandData/#closing","title":"Closing","text":"<p>Data can be fairly simple, but also can be complicated depending on the type of data you're creating/modifying.</p>"},{"location":"guides/Intermediate/Entities/Basics/","title":"Basics","text":"<p>This guide will go over the basic things you'll need for creating your own mobs moving foward.</p>"},{"location":"guides/Intermediate/Entities/Basics/#entity-classes","title":"Entity Classes","text":"<p>Entity Logic is contained within classes. These classes usually extend a different LivingEntity class:</p> <p><pre><code>public abstract class Mob extends LivingEntity implements Targeting\n</code></pre> This is the Mob class which the PathfinderMob uses</p> <p>Entities will usually extend something like the 'Monster' class or the 'Animal' class. These have many of the important things for the entitiy to use (like Pathfinding, important methods, and other things of the such). These classes are used in the EntityType class to register the entity to be able to be used later in a Renderer or spawning.</p>"},{"location":"guides/Intermediate/Entities/Basics/#entitytype-entity-registering","title":"EntityType (Entity Registering)","text":"<p>When you create an entity class, the game doesn't automagically know that entity exists. The way the game is able to know that entity exists and use that entity in spawning, rendering, etc. is through Registering. Registering an entity is fairly simple, you'll need to know a couple of things before creating yours though. </p> <p>First, you'll want to have an entity class prepared, this is required since we need to create a new one when registering:</p> <pre><code>public static final EntityType&lt;Piglin&gt; PIGLIN = register(\"piglin\", EntityType.Builder.of(Piglin::new));\n</code></pre> <p>Second, We'll need to know what kind of entity this is so we can put it into the correct MobCategory:</p> <pre><code>public static final EntityType&lt;Piglin&gt; PIGLIN = register(\"piglin\", EntityType.Builder.of(Piglin::new, MobCategory.MONSTER));\n</code></pre> <p>Finally we'll want to know the dimensions of our entity so we can have a correctly sized hitbox when using .sized(x, y), and the client tracking range we want to use (8 is fine for most mobs). Putting all of that together looks about something like this: </p> <pre><code>public static final EntityType&lt;Piglin&gt; PIGLIN = register(\"piglin\", EntityType.Builder.of(Piglin::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));\n</code></pre> <p>This will again allow the mob to be used elsewhere.</p>"},{"location":"guides/Intermediate/Entities/Basics/#renderering","title":"Renderering","text":"<p>Entities do not automatically have a way to render from just their class. This is where Renderers come in to allow us to render our entities. Renderers are located in the client package of net.minecraft and contains all of the rendering of literally everything. Later in the Entity Guides we will go over them, but they need a guide to themselves.</p>"},{"location":"guides/Intermediate/Entities/Basics/#conclusion","title":"Conclusion","text":"<p>Put simply, Entities exist when you actually register them, they aren't too hard, but we'll learn how to make different kinds of entities later.</p>"},{"location":"guides/Intermediate/Entities/MakingFirstEntity/","title":"Making Your First Entity","text":"<p>This point of the guide will focus on creating your own entity. This will teach you how to make the entity class to finishing the rendering and spawning it in-game.</p> <p>First we'll need to create a entity class for us to use. For this tutorial we'll create a zombie clone with modified stats to be used. To get started, navigate to the <code>net.minecraft.world.entity.monster</code> package, this is where we will create our class. Now let's create a class named <code>ZombieClone</code>, and have it extend the <code>Zombie</code> class. It should now look like:</p> <pre><code>public class ZombieClone extends Zombie\n</code></pre> <p>You'll most likely notice the class has an error on it, for now hover over the error and auto-create the constructor matching the super:</p> <pre><code>public ZombieClone(EntityType&lt;? extends Zombie&gt; p_34271_, Level p_34272_) {\n    super(p_34271_, p_34272_);\n}\n</code></pre> <p>Next we will head to the <code>EntityType</code> class to register this entity, when registering it you should have sonething that looks like:</p> <pre><code>public static final EntityType&lt;ZombieClone&gt; ZOMBIE_CLONE = register(\"zombie_clone\", Builder.&lt;ZombieClone&gt;of(ZombieClone::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));\n</code></pre> <p>Now make your way back to the <code>ZombieClone</code> class and change the constructor <code>EntityType&lt;? extends Zombie&gt;</code> to be <code>EntityType&lt;? extends ZombieClone&gt;</code> instead. It should end up looking like this:</p> <pre><code>public ZombieClone(EntityType&lt;? extends ZombieClone&gt; p_34271_, Level p_34272_) {\n    super(p_34271_, p_34272_);\n}\n</code></pre> <p>We now have a proper entity class! Here we can start adding and overriding functions, for now we will just override the <code>getExperienceReward()</code> function:</p> <pre><code>@Override\npublic int getExperienceReward() {\n    this.xpReward *= 10;\n\n    return super.getExperienceReward();\n}\n</code></pre> <p>Now we will have to define the attributes of the mob, so let's head over to the <code>DefaultAttributes</code> and add em there. All you'll need to add to the <code>SUPPLIERS</code> variable is:</p> <pre><code>.put(EntityType.ZOMBIE_CLONE, ZombieClone.createAttributes().build())\n</code></pre> <p>This will create the attributes for our entity. Now we can go in-game and summon it! As it spawns the entity you'll notice a little thing that happens, the game crashes. This is because the game tries to render the entity without it having an actual renderer, and gets angry. The next part of this tutorial guide will teach you how to make a renderer for your mob!</p>"},{"location":"guides/Intermediate/Entities/Renderering/","title":"Renderering","text":"<p>As stated in the previous guide (Basics), entities do not automagically know how to render themselves. You will need to create your own renderer file so you can render your own mob.</p>"},{"location":"guides/Intermediate/Entities/Renderering/#creating-your-first-renderer","title":"Creating Your First Renderer","text":"<p>Navigate yourself over to the <code>net.minecraft.client.renderer.entity</code> package, this is where we will start on our rendering class. Let's create the <code>ZombieCloneRenderer</code> class to get started, since we are just making a clone of the zombie, let's have it extend the <code>AbstractZombieRenderer</code> with <code>&lt;ZombieClone, ZombieModel&lt;ZombieClone&gt;&gt;</code>. After that you should have a class that looks like:</p> <pre><code>@OnlyIn(Dist.CLIENT)\npublic class ZombieCloneRenderer extends AbstractZombieRenderer&lt;ZombieClone, ZombieModel&lt;ZombieClone&gt;&gt;{\n    public ZombieCloneRenderer(EntityRendererProvider.Context p_174456_) {\n        this(p_174456_, ModelLayers.ZOMBIE, ModelLayers.ZOMBIE_INNER_ARMOR, ModelLayers.ZOMBIE_OUTER_ARMOR);\n    }\n\n    public ZombieCloneRenderer(EntityRendererProvider.Context p_174458_, ModelLayerLocation p_174459_, ModelLayerLocation p_174460_, ModelLayerLocation p_174461_) {\n        super(p_174458_, new ZombieModel&lt;&gt;(p_174458_.bakeLayer(p_174459_)), new ZombieModel&lt;&gt;(p_174458_.bakeLayer(p_174460_)), new ZombieModel&lt;&gt;(p_174458_.bakeLayer(p_174461_)));\n    }\n}\n</code></pre> <p>This will tell the game how to render our mob, and when we register it will stop the crashing from earlier.</p> <p>Now that we have created our renderer, we need to go to the <code>EntityRenderers</code> class. In here you should scroll down until you see:</p> <pre><code>static {\n    register(EntityType.ALLAY, AllayRenderer::new);\n    register(EntityType.AREA_EFFECT_CLOUD, NoopRenderer::new);\n    register(EntityType.ARMOR_STAND, ArmorStandRenderer::new);\n    register(EntityType.ARROW, TippableArrowRenderer::new);\n    register(EntityType.AXOLOTL, AxolotlRenderer::new);\n    register(EntityType.BAT, BatRenderer::new);\n    register(EntityType.BEE, BeeRenderer::new);\n    register(EntityType.BLAZE, BlazeRenderer::new);\n    register(EntityType.BLOCK_DISPLAY, DisplayRenderer.BlockDisplayRenderer::new);\n    ...\n}\n</code></pre> <p>Under the <code>register(EntityType.ZOMBIE, ZombieRenderer::new);</code> we'll add the line:</p> <pre><code>register(EntityType.ZOMBIE_CLONE, ZombieCloneRenderer::new);\n</code></pre> <p>You can now go in-game and your mob will now work!</p>"},{"location":"reference/home/","title":"Welcome to the Reference!","text":"<p>Here you can find a reference for (almost) everything!</p> <p>Some stuff may have less info due to having little knowledge on how that specific thing works.</p> <p>Pretty much all variables are something like <code>p_21051</code>, this is normal.</p>"},{"location":"reference/MCP/Start/","title":"Start","text":"<p>This class is how the game is able to start within the ide</p>"},{"location":"reference/MCP/Start/#main","title":"main","text":"<p>The method which starts the game</p> <pre><code>public static void main(String[] args)\n{\n    /*\n    * start minecraft game application\n    * --version is just used as 'launched version' in snoop data and is required\n    * Working directory is used as gameDir if not provided\n    */\n    String assets = System.getenv().containsKey(\"assetDirectory\") ? System.getenv(\"assetDirectory\") : \"assets\";\n    Main.main(concat(new String[]{\"--version\", \"mcp\", \"--accessToken\", \"0\", \"--assetsDir\", assets, \"--assetIndex\", \"8\", \"--userProperties\", \"{}\"}, args));\n}\n</code></pre>"},{"location":"reference/MCP/Start/#concat","title":"concat","text":"<pre><code>public static &lt;T&gt; T[] concat(T[] first, T[] second)\n{\n    T[] result = Arrays.copyOf(first, first.length + second.length);\n    System.arraycopy(second, 0, result, first.length, second.length);\n    return result;\n}\n</code></pre>"},{"location":"reference/Minecraft/BlockUtil/","title":"BlockUtil","text":"<pre><code>public class BlockUtil\n</code></pre>"},{"location":"reference/Minecraft/BlockUtil/#foundrectanglegetlargestrectanglearound","title":"FoundRectangle.getLargestRectangleAround","text":"<pre><code>public static BlockUtil.FoundRectangle getLargestRectangleAround(BlockPos p_124335_, Direction.Axis p_124336_, int p_124337_, Direction.Axis p_124338_, int p_124339_, Predicate&lt;BlockPos&gt; p_124340_) {\n    BlockPos.MutableBlockPos blockpos$mutableblockpos = p_124335_.mutable();\n    Direction direction = Direction.get(Direction.AxisDirection.NEGATIVE, p_124336_);\n    Direction direction1 = direction.getOpposite();\n    Direction direction2 = Direction.get(Direction.AxisDirection.NEGATIVE, p_124338_);\n    Direction direction3 = direction2.getOpposite();\n    int i = getLimit(p_124340_, blockpos$mutableblockpos.set(p_124335_), direction, p_124337_);\n    int j = getLimit(p_124340_, blockpos$mutableblockpos.set(p_124335_), direction1, p_124337_);\n    int k = i;\n    BlockUtil.IntBounds[] ablockutil$intbounds = new BlockUtil.IntBounds[i + 1 + j];\n    ablockutil$intbounds[i] = new BlockUtil.IntBounds(getLimit(p_124340_, blockpos$mutableblockpos.set(p_124335_), direction2, p_124339_), getLimit(p_124340_, blockpos$mutableblockpos.set(p_124335_), direction3, p_124339_));\n    int l = ablockutil$intbounds[i].min;\n\n    for(int i1 = 1; i1 &lt;= i; ++i1) {\n        BlockUtil.IntBounds blockutil$intbounds = ablockutil$intbounds[k - (i1 - 1)];\n        ablockutil$intbounds[k - i1] = new BlockUtil.IntBounds(getLimit(p_124340_, blockpos$mutableblockpos.set(p_124335_).move(direction, i1), direction2, blockutil$intbounds.min), getLimit(p_124340_, blockpos$mutableblockpos.set(p_124335_).move(direction, i1), direction3, blockutil$intbounds.max));\n    }\n\n    for(int l2 = 1; l2 &lt;= j; ++l2) {\n        BlockUtil.IntBounds blockutil$intbounds2 = ablockutil$intbounds[k + l2 - 1];\n        ablockutil$intbounds[k + l2] = new BlockUtil.IntBounds(getLimit(p_124340_, blockpos$mutableblockpos.set(p_124335_).move(direction1, l2), direction2, blockutil$intbounds2.min), getLimit(p_124340_, blockpos$mutableblockpos.set(p_124335_).move(direction1, l2), direction3, blockutil$intbounds2.max));\n    }\n\n    int i3 = 0;\n    int j3 = 0;\n    int j1 = 0;\n    int k1 = 0;\n    int[] aint = new int[ablockutil$intbounds.length];\n\n    for(int l1 = l; l1 &gt;= 0; --l1) {\n        for(int i2 = 0; i2 &lt; ablockutil$intbounds.length; ++i2) {\n            BlockUtil.IntBounds blockutil$intbounds1 = ablockutil$intbounds[i2];\n            int j2 = l - blockutil$intbounds1.min;\n            int k2 = l + blockutil$intbounds1.max;\n            aint[i2] = l1 &gt;= j2 &amp;&amp; l1 &lt;= k2 ? k2 + 1 - l1 : 0;\n        }\n\n        Pair&lt;BlockUtil.IntBounds, Integer&gt; pair = getMaxRectangleLocation(aint);\n        BlockUtil.IntBounds blockutil$intbounds3 = pair.getFirst();\n        int k3 = 1 + blockutil$intbounds3.max - blockutil$intbounds3.min;\n        int l3 = pair.getSecond();\n        if (k3 * l3 &gt; j1 * k1) {\n            i3 = blockutil$intbounds3.min;\n            j3 = l1;\n            j1 = k3;\n            k1 = l3;\n        }\n    }\n\n    return new BlockUtil.FoundRectangle(p_124335_.relative(p_124336_, i3 - k).relative(p_124338_, j3 - l), j1, k1);\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/Advancement/","title":"Advancement","text":"<pre><code>public record Advancement(Optional&lt;ResourceLocation&gt; parent, Optional&lt;DisplayInfo&gt; display, AdvancementRewards rewards, Map&lt;String, Criterion&lt;?&gt;&gt; criteria, AdvancementRequirements requirements, boolean sendsTelemetryEvent, Optional&lt;Component&gt; name)\n</code></pre>"},{"location":"reference/Minecraft/Advancement/Advancement/#constructor","title":"Constructor","text":"<pre><code>public Advancement(Optional&lt;ResourceLocation&gt; p_299284_, Optional&lt;DisplayInfo&gt; p_301017_, AdvancementRewards p_286389_, Map&lt;String, Criterion&lt;?&gt;&gt; p_286635_, AdvancementRequirements p_300504_, boolean p_286478_) {\n    this(p_299284_, p_301017_, p_286389_, Map.copyOf(p_286635_), p_300504_, p_286478_, p_301017_.map(Advancement::decorateName));\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/Advancement/#decoratename","title":"decorateName","text":"<p>Decorates the name of the advancement based on the input display info</p> <pre><code>private static Component decorateName(DisplayInfo p_300038_) {\n    Component component = p_300038_.getTitle();\n    ChatFormatting chatformatting = p_300038_.getFrame().getChatColor();\n    Component component1 = ComponentUtils.mergeStyles(component.copy(), Style.EMPTY.withColor(chatformatting)).append(\"\\n\").append(p_300038_.getDescription());\n    Component component2 = component.copy().withStyle((p_138316_) -&gt; {\n        return p_138316_.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, component1));\n    });\n    return ComponentUtils.wrapInSquareBrackets(component2).withStyle(chatformatting);\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/Advancement/#name","title":"name","text":"<p>Returns the name Component of the Advancement</p> <pre><code>public static Component name(AdvancementHolder p_297556_) {\n    return p_297556_.value().name().orElseGet(() -&gt; {\n        return Component.literal(p_297556_.id().toString());\n    });\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/Advancement/#serializetojson","title":"serializeToJson","text":"<p>serializes the advancement to a json object to be used in game</p> <pre><code>public JsonObject serializeToJson() {\n    JsonObject jsonobject = new JsonObject();\n    this.parent.ifPresent((p_296095_) -&gt; {\n        jsonobject.addProperty(\"parent\", p_296095_.toString());\n    });\n    this.display.ifPresent((p_296097_) -&gt; {\n        jsonobject.add(\"display\", p_296097_.serializeToJson());\n    });\n    jsonobject.add(\"rewards\", this.rewards.serializeToJson());\n    JsonObject jsonobject1 = new JsonObject();\n\n    for(Map.Entry&lt;String, Criterion&lt;?&gt;&gt; entry : this.criteria.entrySet()) {\n        jsonobject1.add(entry.getKey(), entry.getValue().serializeToJson());\n    }\n\n    jsonobject.add(\"criteria\", jsonobject1);\n    jsonobject.add(\"requirements\", this.requirements.toJson());\n    jsonobject.addProperty(\"sends_telemetry_event\", this.sendsTelemetryEvent);\n    return jsonobject;\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/Advancement/#fromjson","title":"fromJson","text":"<p>Get an advancement from a json</p> <pre><code>public static Advancement fromJson(JsonObject p_300691_, DeserializationContext p_300053_) {\n    Optional&lt;ResourceLocation&gt; optional = p_300691_.has(\"parent\") ? Optional.of(new ResourceLocation(GsonHelper.getAsString(p_300691_, \"parent\"))) : Optional.empty();\n    Optional&lt;DisplayInfo&gt; optional1 = p_300691_.has(\"display\") ? Optional.of(DisplayInfo.fromJson(GsonHelper.getAsJsonObject(p_300691_, \"display\"))) : Optional.empty();\n    AdvancementRewards advancementrewards = p_300691_.has(\"rewards\") ? AdvancementRewards.deserialize(GsonHelper.getAsJsonObject(p_300691_, \"rewards\")) : AdvancementRewards.EMPTY;\n    Map&lt;String, Criterion&lt;?&gt;&gt; map = Criterion.criteriaFromJson(GsonHelper.getAsJsonObject(p_300691_, \"criteria\"), p_300053_);\n    if (map.isEmpty()) {\n        throw new JsonSyntaxException(\"Advancement criteria cannot be empty\");\n    } else {\n        JsonArray jsonarray = GsonHelper.getAsJsonArray(p_300691_, \"requirements\", new JsonArray());\n        AdvancementRequirements advancementrequirements;\n        if (jsonarray.isEmpty()) {\n            advancementrequirements = AdvancementRequirements.allOf(map.keySet());\n        } else {\n            advancementrequirements = AdvancementRequirements.fromJson(jsonarray, map.keySet());\n        }\n\n        boolean flag = GsonHelper.getAsBoolean(p_300691_, \"sends_telemetry_event\", false);\n        return new Advancement(optional, optional1, advancementrewards, map, advancementrequirements, flag);\n    }\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/Advancement/#write","title":"write","text":"<p>Writes the advancement info to a FriendlyByteBuf <pre><code>public void write(FriendlyByteBuf p_299393_) {\n    p_299393_.writeOptional(this.parent, FriendlyByteBuf::writeResourceLocation);\n    p_299393_.writeOptional(this.display, (p_296098_, p_296099_) -&gt; {\n        p_296099_.serializeToNetwork(p_296098_);\n    });\n    this.requirements.write(p_299393_);\n    p_299393_.writeBoolean(this.sendsTelemetryEvent);\n}\n</code></pre></p>"},{"location":"reference/Minecraft/Advancement/Advancement/#read","title":"read","text":"<p>Reads the advancement from a FriendlyByteBuf <pre><code>public static Advancement read(FriendlyByteBuf p_300670_) {\n    return new Advancement(p_300670_.readOptional(FriendlyByteBuf::readResourceLocation), p_300670_.readOptional(DisplayInfo::fromNetwork), AdvancementRewards.EMPTY, Map.of(), new AdvancementRequirements(p_300670_), p_300670_.readBoolean());\n}\n</code></pre></p>"},{"location":"reference/Minecraft/Advancement/Advancement/#isroot","title":"isRoot","text":"<p>Returns if this is a root advancement or not <pre><code>public boolean isRoot() {\n    return this.parent.isEmpty();\n}\n</code></pre></p>"},{"location":"reference/Minecraft/Advancement/Advancement/#builder-class","title":"Builder Class","text":""},{"location":"reference/Minecraft/Advancement/Advancement/#advancement_1","title":"advancement","text":"<p>Returns a new Advancement Builder with a telemetry event <pre><code>public static Advancement.Builder advancement() {\n    return (new Advancement.Builder()).sendsTelemetryEvent();\n}\n</code></pre></p>"},{"location":"reference/Minecraft/Advancement/Advancement/#recipeadvancement","title":"recipeAdvancement","text":"<p>Returns a new Advancement Builder <pre><code>public static Advancement.Builder recipeAdvancement() {\n    return new Advancement.Builder();\n}\n</code></pre></p>"},{"location":"reference/Minecraft/Advancement/Advancement/#parent","title":"parent","text":"<p>Sets the parent of the advancement, then returns the advancement <pre><code>public Advancement.Builder parent(AdvancementHolder p_300513_) {\n    this.parent = Optional.of(p_300513_.id());\n    return this;\n}\n</code></pre></p>"},{"location":"reference/Minecraft/Advancement/Advancement/#parent-deprecated","title":"parent (Deprecated)","text":"<p>Sets the parent of the advancement, then returns the advancement <pre><code>public Advancement.Builder parent(ResourceLocation p_138397_) {\n    this.parent = Optional.of(p_138397_);\n    return this;\n}\n</code></pre></p>"},{"location":"reference/Minecraft/Advancement/Advancement/#display-itemstack","title":"display (ItemStack)","text":"<p>Returns the display of the advancement from a new DisplayInfo using an ItemStack <pre><code>public Advancement.Builder display(ItemStack p_138363_, Component p_138364_, Component p_138365_, @Nullable ResourceLocation p_138366_, FrameType p_138367_, boolean p_138368_, boolean p_138369_, boolean p_138370_) {\n    return this.display(new DisplayInfo(p_138363_, p_138364_, p_138365_, p_138366_, p_138367_, p_138368_, p_138369_, p_138370_));\n}\n</code></pre></p>"},{"location":"reference/Minecraft/Advancement/Advancement/#display-itemlike","title":"display (ItemLike)","text":"<p>Returns the display of the advancement from a new DisplayInfo using an ItemLike class <pre><code>public Advancement.Builder display(ItemLike p_138372_, Component p_138373_, Component p_138374_, @Nullable ResourceLocation p_138375_, FrameType p_138376_, boolean p_138377_, boolean p_138378_, boolean p_138379_) {\n    return this.display(new DisplayInfo(new ItemStack(p_138372_.asItem()), p_138373_, p_138374_, p_138375_, p_138376_, p_138377_, p_138378_, p_138379_));\n}\n</code></pre></p>"},{"location":"reference/Minecraft/Advancement/Advancement/#display-displayinfo","title":"display (DisplayInfo)","text":"<p>Sets the display of the advancement from DisplayInfo, then returns the advancement <pre><code>public Advancement.Builder display(DisplayInfo p_138359_) {\n    this.display = Optional.of(p_138359_);\n    return this;\n}\n</code></pre></p>"},{"location":"reference/Minecraft/Advancement/Advancement/#rewards-builder","title":"rewards (Builder)","text":"<p>Returns the rewards of the advancement from a AdvancementRewards.Builder <pre><code>public Advancement.Builder rewards(AdvancementRewards.Builder p_138355_) {\n    return this.rewards(p_138355_.build());\n}\n</code></pre></p>"},{"location":"reference/Minecraft/Advancement/Advancement/#rewards","title":"rewards","text":"<p>Sets the rewards from a AdvancementRewards then returns the advancement <pre><code>public Advancement.Builder rewards(AdvancementRewards p_138357_) {\n    this.rewards = p_138357_;\n    return this;\n}\n</code></pre></p>"},{"location":"reference/Minecraft/Advancement/Advancement/#addcriterion","title":"addCriterion","text":"<p>Adds a criterion from a string and Criterion&lt;?&gt; object, then returns the advancement <pre><code>public Advancement.Builder addCriterion(String p_138384_, Criterion&lt;?&gt; p_138385_) {\n    this.criteria.put(p_138384_, p_138385_);\n    return this;\n}\n</code></pre></p>"},{"location":"reference/Minecraft/Advancement/Advancement/#requirements-strategy","title":"requirements (Strategy)","text":"<p>Sets the requirementsStragtegy from an AdvancementRequirements.Strategy, then returns the advancement <pre><code>public Advancement.Builder requirements(AdvancementRequirements.Strategy p_298091_) {\n    this.requirementsStrategy = p_298091_;\n    return this;\n}\n</code></pre></p>"},{"location":"reference/Minecraft/Advancement/Advancement/#requirements","title":"requirements","text":"<p>Sets the requriements from an AdvancementRequirements, then returns the advancement <pre><code>public Advancement.Builder requirements(AdvancementRequirements p_300756_) {\n    this.requirements = Optional.of(p_300756_);\n    return this;\n}\n</code></pre></p>"},{"location":"reference/Minecraft/Advancement/Advancement/#sendstelemetryevent","title":"sendsTelemetryEvent","text":"<p>Sets sendsTelemetryEvent to true, then returns the advancement <pre><code>public Advancement.Builder sendsTelemetryEvent() {\n    this.sendsTelemetryEvent = true;\n    return this;\n}\n</code></pre></p>"},{"location":"reference/Minecraft/Advancement/Advancement/#build","title":"build","text":"<p>Builds an advancement from a resourcelocation, and the set data from the builder. Returns a new AdvanementHolder <pre><code>public AdvancementHolder build(ResourceLocation p_138404_) {\n    Map&lt;String, Criterion&lt;?&gt;&gt; map = this.criteria.buildOrThrow();\n    AdvancementRequirements advancementrequirements = this.requirements.orElseGet(() -&gt; {\n        return this.requirementsStrategy.create(map.keySet());\n    });\n    return new AdvancementHolder(p_138404_, new Advancement(this.parent, this.display, this.rewards, map, advancementrequirements, this.sendsTelemetryEvent));\n}\n</code></pre></p>"},{"location":"reference/Minecraft/Advancement/Advancement/#save","title":"save","text":"<p>Builds a AdvancementHolder from a String, and accepts the Advancement <pre><code>public AdvancementHolder save(Consumer&lt;AdvancementHolder&gt; p_138390_, String p_138391_) {\n    AdvancementHolder advancementholder = this.build(new ResourceLocation(p_138391_));\n    p_138390_.accept(advancementholder);\n    return advancementholder;\n}\n</code></pre></p>"},{"location":"reference/Minecraft/Advancement/AdvancementHolder/","title":"Advancement Holder","text":"<pre><code>public record AdvancementHolder(ResourceLocation id, Advancement value)\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementHolder/#write","title":"write","text":"<pre><code>public void write(FriendlyByteBuf p_299066_) {\n    p_299066_.writeResourceLocation(this.id);\n    this.value.write(p_299066_);\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementHolder/#read","title":"read","text":"<pre><code>public static AdvancementHolder read(FriendlyByteBuf p_299642_) {\n    return new AdvancementHolder(p_299642_.readResourceLocation(), Advancement.read(p_299642_));\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementHolder/#equals","title":"equals","text":"<pre><code>public boolean equals(Object p_298719_) {\n    if (this == p_298719_) {\n        return true;\n    } else {\n        if (p_298719_ instanceof AdvancementHolder) {\n            AdvancementHolder advancementholder = (AdvancementHolder)p_298719_;\n            if (this.id.equals(advancementholder.id)) {\n               return true;\n            }\n        }\n\n        return false;\n    }\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementHolder/#hashcode","title":"hashCode","text":"<pre><code>public int hashCode() {\n    return this.id.hashCode();\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementHolder/#tostring","title":"toString","text":"<pre><code>public String toString() {\n    return this.id.toString();\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementNode/","title":"Advancement Node","text":"<pre><code>public class AdvancementNode\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementNode/#constructor","title":"Constructor","text":"<pre><code>@VisibleForTesting\npublic AdvancementNode(AdvancementHolder p_300583_, @Nullable AdvancementNode p_299774_) {\n    this.holder = p_300583_;\n    this.parent = p_299774_;\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementNode/#advancement","title":"advancement","text":"<pre><code>public Advancement advancement() {\n    return this.holder.value();\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementNode/#holder","title":"holder","text":"<pre><code>public AdvancementHolder holder() {\n    return this.holder;\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementNode/#parent","title":"parent","text":"<pre><code>@Nullable\npublic AdvancementNode parent() {\n    return this.parent;\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementNode/#root","title":"root","text":"<pre><code>public AdvancementNode root() {\n    return getRoot(this);\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementNode/#getroot","title":"getRoot","text":"<pre><code>public static AdvancementNode getRoot(AdvancementNode p_300357_) {\n    AdvancementNode advancementnode = p_300357_;\n\n    while(true) {\n        AdvancementNode advancementnode1 = advancementnode.parent();\n        if (advancementnode1 == null) {\n            return advancementnode;\n        }\n\n        advancementnode = advancementnode1;\n    }\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementNode/#children","title":"children","text":"<pre><code>public Iterable&lt;AdvancementNode&gt; children() {\n    return this.children;\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementNode/#addchild","title":"addChild","text":"<pre><code>@VisibleForTesting\npublic void addChild(AdvancementNode p_298204_) {\n    this.children.add(p_298204_);\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementNode/#equals","title":"equals","text":"<pre><code>public boolean equals(Object p_297253_) {\n    if (this == p_297253_) {\n        return true;\n    } else {\n        if (p_297253_ instanceof AdvancementNode) {\n            AdvancementNode advancementnode = (AdvancementNode)p_297253_;\n            if (this.holder.equals(advancementnode.holder)) {\n               return true;\n            }\n        }\n\n        return false;\n    }\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementNode/#hashcode","title":"hashCode","text":"<pre><code>public int hashCode() {\n    return this.holder.hashCode();\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementNode/#tostring","title":"toString","text":"<pre><code>public String toString() {\n    return this.holder.id().toString();\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/","title":"Advancement Progress","text":"<pre><code>public class AdvancementProgress implements Comparable&lt;AdvancementProgress&gt;\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/#constructor","title":"Constructor","text":"<pre><code>private AdvancementProgress(Map&lt;String, CriterionProgress&gt; p_144358_) {\n    this.criteria = p_144358_;\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/#constructer-public","title":"Constructer (Public)","text":"<pre><code>public AdvancementProgress() {\n    this.criteria = Maps.newHashMap();\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/#update","title":"update","text":"<pre><code>public void update(AdvancementRequirements p_300626_) {\n    Set&lt;String&gt; set = p_300626_.names();\n    this.criteria.entrySet().removeIf((p_8203_) -&gt; {\n        return !set.contains(p_8203_.getKey());\n    });\n\n    for(String s : set) {\n        this.criteria.putIfAbsent(s, new CriterionProgress());\n    }\n\n    this.requirements = p_300626_;\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/#isdone","title":"isDone","text":"<pre><code>public boolean isDone() {\n    return this.requirements.test(this::isCriterionDone);\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/#hasprogress","title":"hasProgress","text":"<pre><code>public boolean hasProgress() {\n    for(CriterionProgress criterionprogress : this.criteria.values()) {\n        if (criterionprogress.isDone()) {\n            return true;\n        }\n    }\n\n    return false;\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/#grantprogress","title":"grantProgress","text":"<pre><code>public boolean grantProgress(String p_8197_) {\n    CriterionProgress criterionprogress = this.criteria.get(p_8197_);\n    if (criterionprogress != null &amp;&amp; !criterionprogress.isDone()) {\n        criterionprogress.grant();\n        return true;\n    } else {\n        return false;\n    }\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/#revokeprogress","title":"revokeProgress","text":"<pre><code>public boolean revokeProgress(String p_8210_) {\n    CriterionProgress criterionprogress = this.criteria.get(p_8210_);\n    if (criterionprogress != null &amp;&amp; criterionprogress.isDone()) {\n        criterionprogress.revoke();\n        return true;\n    } else {\n        return false;\n    }\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/#tostring","title":"toString","text":"<pre><code>public String toString() {\n    return \"AdvancementProgress{criteria=\" + this.criteria + \", requirements=\" + this.requirements + \"}\";\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/#serializetonetwork","title":"serializeToNetwork","text":"<pre><code>public void serializeToNetwork(FriendlyByteBuf p_8205_) {\n    p_8205_.writeMap(this.criteria, FriendlyByteBuf::writeUtf, (p_144360_, p_144361_) -&gt; {\n        p_144361_.serializeToNetwork(p_144360_);\n    });\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/#fromnetwork","title":"fromNetwork","text":"<pre><code>public static AdvancementProgress fromNetwork(FriendlyByteBuf p_8212_) {\n    Map&lt;String, CriterionProgress&gt; map = p_8212_.readMap(FriendlyByteBuf::readUtf, CriterionProgress::fromNetwork);\n    return new AdvancementProgress(map);\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/#getcriterion","title":"getCriterion","text":"<pre><code>@Nullable\npublic CriterionProgress getCriterion(String p_8215_) {\n    return this.criteria.get(p_8215_);\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/#iscriteriondone","title":"isCriterionDone","text":"<pre><code>private boolean isCriterionDone(String p_301316_) {\n    CriterionProgress criterionprogress = this.getCriterion(p_301316_);\n    return criterionprogress != null &amp;&amp; criterionprogress.isDone();\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/#getpercent","title":"getPercent","text":"<pre><code>public float getPercent() {\n    if (this.criteria.isEmpty()) {\n        return 0.0F;\n    } else {\n        float f = (float)this.requirements.size();\n        float f1 = (float)this.countCompletedRequirements();\n        return f1 / f;\n    }\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/#getprogresstext","title":"getProgressText","text":"<pre><code>@Nullable\npublic Component getProgressText() {\n    if (this.criteria.isEmpty()) {\n        return null;\n    } else {\n        int i = this.requirements.size();\n        if (i &lt;= 1) {\n            return null;\n        } else {\n            int j = this.countCompletedRequirements();\n            return Component.translatable(\"advancements.progress\", j, i);\n        }\n    }\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/#countcompletedrequirements","title":"countCompletedRequirements","text":"<pre><code>private int countCompletedRequirements() {\n    return this.requirements.count(this::isCriterionDone);\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/#getremainingcriteria","title":"getRemainingCriteria","text":"<pre><code>public Iterable&lt;String&gt; getRemainingCriteria() {\n    List&lt;String&gt; list = Lists.newArrayList();\n\n    for(Map.Entry&lt;String, CriterionProgress&gt; entry : this.criteria.entrySet()) {\n         f (!entry.getValue().isDone()) {\n            list.add(entry.getKey());\n        }\n    }\n\n    return list;\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/#getcompletedcriteria","title":"getCompletedCriteria","text":"<pre><code>public Iterable&lt;String&gt; getCompletedCriteria() {\n    List&lt;String&gt; list = Lists.newArrayList();\n\n    for(Map.Entry&lt;String, CriterionProgress&gt; entry : this.criteria.entrySet()) {\n        if (entry.getValue().isDone()) {\n            list.add(entry.getKey());\n        }\n    }\n\n    return list;\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementProgress/#getfirstprogressdate","title":"getFirstProgressDate","text":"<pre><code>@Nullable\npublic Instant getFirstProgressDate() {\n    return this.criteria.values().stream().map(CriterionProgress::getObtained).filter(Objects::nonNull).min(Comparator.naturalOrder()).orElse((Instant)null);\n}\n\npublic int compareTo(AdvancementProgress p_8195_) {\n    Instant instant = this.getFirstProgressDate();\n    Instant instant1 = p_8195_.getFirstProgressDate();\n    if (instant == null &amp;&amp; instant1 != null) {\n        return 1;\n    } else if (instant != null &amp;&amp; instant1 == null) {\n        return -1;\n    } else {\n        return instant == null &amp;&amp; instant1 == null ? 0 : instant.compareTo(instant1);\n    }\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementRequirements/","title":"Advancement Requirements","text":"<pre><code>public record AdvancementRequirements(String[][] requirements)\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementRequirements/#constructor","title":"Constructor","text":"<pre><code>public AdvancementRequirements(FriendlyByteBuf friendlyByteBuf) {\n    this(read(friendlyByteBuf));\n}\n</code></pre>"},{"location":"reference/Minecraft/Advancement/AdvancementRequirements/#read","title":"read","text":"<pre><code>private static String[][] read(FriendlyByteBuf friendlyByteBuf) {\n    String[][] astring = new String[friendlyByteBuf.readVarInt()][];\n\n    for(int i = 0; i &lt; astring.length; ++i) {\n        astring[i] = new String[friendlyByteBuf.readVarInt()];\n\n        for(int j = 0; j &lt; astring[i].length; ++j) {\n            astring[i][j] = friendlyByteBuf.readUtf();\n        }\n    }\n\n    return astring;\n}\n</code></pre>"},{"location":"reference/Mojang/Blaze3d/Blaze3D/","title":"Blaze3D","text":"<pre><code>@OnlyIn(Dist.CLIENT)\npublic class Blaze3D\n</code></pre>"},{"location":"reference/Mojang/Blaze3d/Blaze3D/#process","title":"process","text":"<p>Goes unused within 1.20.2</p> <pre><code>public static void process(RenderPipeline p_166119_, float p_166120_) {\n    ConcurrentLinkedQueue&lt;RenderCall&gt; concurrentlinkedqueue = p_166119_.getRecordingQueue();\n}\n</code></pre>"},{"location":"reference/Mojang/Blaze3d/Blaze3D/#render","title":"render","text":"<p>Goes unused within 1.20.2</p> <pre><code>public static void render(RenderPipeline p_166122_, float p_166123_) {\n    ConcurrentLinkedQueue&lt;RenderCall&gt; concurrentlinkedqueue = p_166122_.getProcessedQueue();\n}\n</code></pre>"},{"location":"reference/Mojang/Blaze3d/Blaze3D/#youjustlostthegame","title":"youJustLostTheGame","text":"<p>Used with debug crash trigger while holding control</p> <pre><code>public static void youJustLostTheGame() {\n    MemoryUtil.memSet(0L, 0, 1L);\n}\n</code></pre>"},{"location":"reference/Mojang/Blaze3d/Blaze3D/#gettime","title":"getTime","text":"<p>Used to get the current running time</p> <pre><code>public static double getTime() {\n    return GLFW.glfwGetTime();\n}\n</code></pre>"}]}